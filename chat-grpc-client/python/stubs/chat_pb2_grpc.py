# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class chatServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.login = channel.unary_stream(
                '/chatService/login',
                request_serializer=chat__pb2.connect.SerializeToString,
                response_deserializer=chat__pb2.messageResponse.FromString,
                )
        self.sendTo = channel.unary_unary(
                '/chatService/sendTo',
                request_serializer=chat__pb2.messageRequest.SerializeToString,
                response_deserializer=chat__pb2.messageResponse.FromString,
                )


class chatServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendTo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_chatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'login': grpc.unary_stream_rpc_method_handler(
                    servicer.login,
                    request_deserializer=chat__pb2.connect.FromString,
                    response_serializer=chat__pb2.messageResponse.SerializeToString,
            ),
            'sendTo': grpc.unary_unary_rpc_method_handler(
                    servicer.sendTo,
                    request_deserializer=chat__pb2.messageRequest.FromString,
                    response_serializer=chat__pb2.messageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class chatService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/chatService/login',
            chat__pb2.connect.SerializeToString,
            chat__pb2.messageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendTo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chatService/sendTo',
            chat__pb2.messageRequest.SerializeToString,
            chat__pb2.messageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
